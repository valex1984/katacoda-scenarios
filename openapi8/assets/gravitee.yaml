---
# Source: apim3/templates/api/api-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gravitee-apim3-api
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: gravitee
    app.kubernetes.io/version: 3.11.2
    app.kubernetes.io/component: "api"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-3.1.30
data:
  gravitee.yml: |

    management:
      url: https://INGRESS_HOSTNAME_PLACEHOLDER/BASE_PATH-32100/
      type: jdbc
      jdbc:
        url: jdbc:postgresql://postgres-apim-postgresql:5432/graviteeapim
        username: postgres
        password: postgres
        schema: public
        liquibase: true
        pool:
          autoCommit: true
          connectionTimeout: 10000
          idleTimeout: 600000
          maxLifetime: 1800000
          maxPoolSize: 10
          minIdle: 10
          registerMbeans: true

    services:
      core:
        http:
          enabled: true
          port: 18083
          host: localhost
          authentication:
            type: basic
            users:
              admin: adminadmin
    httpClient:
      timeout: 10000
    http:
      api:
        entrypoint: /
        management:
          entrypoint: ${http.api.entrypoint}management
        portal:
          entrypoint: ${http.api.entrypoint}portal

    analytics:
      type: elasticsearch
      elasticsearch:
        endpoints:
          - http://elasticsearch-master:9200
        index: gravitee
    security:
      trustAll: false
      providers:
        - type: gravitee
        - type: memory
          # password encoding/hashing algorithm. One of:
          # - bcrypt : passwords are hashed with bcrypt
          # - none : passwords are not hashed/encrypted
          # default value is bcrypt
          password-encoding-algo: bcrypt
          allow-email-in-search-results: false
          users:
            - user:
              username: admin
              password: $2a$10$Ihk05VSds5rUSgMdsMVi9OKMIx2yUvMz7y9VP3rJmQeizZLrhLMyq
              roles: ORGANIZATION:ADMIN, ENVIRONMENT:ADMIN
              email: sbercode@none.net
              firstName: admin
              lastName: admin
            - user:
              username: user
              # Password value: password
              password: $2a$10$9kjw/SH9gucCId3Lnt6EmuFreUAcXSZgpvAYuW2ISv7hSOhHRH1AO
              roles: ORGANIZATION:USER, ENVIRONMENT:USER
    # SMTP configuration used to send mails
    email:
      enabled: false
      host: smtp.my.domain
      subject: "[Gravitee.io] %s"
      port: 587
      from: noreply@my.domain


      # SMTP configuration used to send notifications / alerts
    notifiers:
      email:
        enabled: true
        host: ${email.host}
        subject: ${email.subject}
        port: ${email.port}


    # Mail templates
    templates:
      path: ${gravitee.home}/templates

    jwt:
      secret: xxhkgkKJHytvkt33_Sdf_dsf

    swagger:
      # Default scheme used when creating an API from a Swagger descriptor if there is no scheme specified.
      scheme: https

    user:
      login:
        # Create a default application when user connects to the portal for the very first time (default true)
        defaultApplication: true
      creation:
        # Allows to register new users from portal (default false)
        #enabled: true
        token:
          #expire-after: 86400
        anonymize-on-delete:
          enabled: false
    # The portal URL used in emails
    portalURL: https://INGRESS_HOSTNAME_PLACEHOLDER

    # Allows to create support ticket (default value: false)
    support:
      enabled: true

    # Allows to rate an API (default value: false)
    rating :
      enabled: true

    # Alert Engine communication
    
    alerts:
      alert-engine-connector-ws:
        enabled: false
---
# Source: apim3/templates/gateway/gateway-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gravitee-apim3-gateway
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: gravitee
    app.kubernetes.io/version: 3.11.2
    app.kubernetes.io/component: "gateway"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-3.1.30
data:
  gravitee.yml: |
    # Gateway HTTP server
    http:
      port: 8082
      host: 0.0.0.0
    #  idleTimeout: 0
    #  tcpKeepAlive: true
    #  compressionSupported: false
    #  instances: 0
      alpn: true
      websocket:
        enabled: false
    management:
      type: jdbc
      jdbc:
        url: jdbc:postgresql://postgres-apim-postgresql:5432/graviteeapim
        username: postgres
        password: postgres
        schema: public
        liquibase: true
        pool:
          autoCommit: true
          connectionTimeout: 10000
          idleTimeout: 600000
          maxLifetime: 1800000
          maxPoolSize: 10
          minIdle: 10
          registerMbeans: true

    ratelimit:
      type: jdbc
      jdbc:
        url: jdbc:postgresql://postgres-apim-postgresql:5432/graviteeapim
        username: postgres
        password: postgres
        schema: public
        liquibase: true
        pool:
          autoCommit: true
          connectionTimeout: 10000
          idleTimeout: 600000
          maxLifetime: 1800000
          maxPoolSize: 10
          minIdle: 10
          registerMbeans: true

    cache:
      type: ehcache
      enabled: true

    # Sharding tags configuration
    # Allows to define inclusion/exclusion sharding tags to only deploy a part of APIs. To exclude just prefix the tag with '!'.
    tags:   

    # Multi-tenant configuration
    # Allow only a single-value
    tenant: 
    
    # Reporters configuration (used to store reporting monitoring data, request metrics, healthchecks and others...
    # All reporters are enabled by default. To stop one of them, you have to add the property 'enabled: false'
    reporters:
      # Elasticsearch reporter
      elasticsearch:
        enabled: true
        endpoints:
          - http://elasticsearch-master:9200
        index: gravitee
        bulk:
          actions: 1000           # Number of requests action before flush
          flush_interval: 5       # Flush interval in seconds

    services:
      core:
        http:
          enabled: true
          port: 18082
          host: localhost
          authentication:
            type: basic
            users:
              admin: adminadmin
          secured: false
      kubernetes:
        enabled: false

      sync: 
        cron: '*/5 * * * * *'

      # Service used to store and cache api-keys from the management repository to avoid direct repository communication
      # while serving requests.
      apikeyscache:
        delay: 10000
        unit: MILLISECONDS
        threads: 3 # Threads core size used to retrieve api-keys from repository.

      # Local registry service.
      # This registry is used to load API Definition with json format from the file system. By doing so, you do not need
      # to configure your API using the web console or the rest API (but you need to know and understand the json descriptor
      # format to make it work....)
      local:
        enabled: false
        path: ${gravitee.home}/apis # The path to API descriptors

      # Gateway monitoring service.
      # This service retrieves metrics like os / process / jvm metrics and send them to an underlying reporting service.
      monitoring:
        delay: 5000
        unit: MILLISECONDS

      # Endpoint healthcheck service.
      healthcheck:
        threads: 3 # Threads core size used to check endpoint availability
    policy:
      api-key:
        header: X-Gravitee-Api-Key
        param: api-key
    
    # Alert Engine communication
    alerts:
      alert-engine-connector-ws:
        enabled: false
---
# Source: apim3/templates/portal/portal-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gravitee-apim3-portal
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: gravitee
    app.kubernetes.io/version: 3.11.2
    app.kubernetes.io/component: "portal"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-3.1.30
data:
  use-gzip: "true"
  gzip-level: "5"
  gzip-types: "*"
  config.json: |
    {
      "baseURL": "https://INGRESS_HOSTNAME_PLACEHOLDER/BASE_PATH-32100/portal/environments/DEFAULT",
      "loaderURL": "assets/images/gravitee-loader.gif",
      "pagination": {
        "size": {
          "default": 10,
          "values": [5, 10, 25, 50, 100]
        }
      }
    }
---
# Source: apim3/templates/ui/ui-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gravitee-apim3-ui
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: gravitee
    app.kubernetes.io/version: 3.11.2
    app.kubernetes.io/component: "ui"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-3.1.30
data:
  use-gzip: "true"
  gzip-level: "5"
  gzip-types: "*"
  constants.json: |
    {
      "baseURL": "https://INGRESS_HOSTNAME_PLACEHOLDER/BASE_PATH-32100/management/organizations/DEFAULT/environments/DEFAULT/",
      "management": {
        "title": "API Management"
      },
      "company": {
        "name": "Gravitee.io"
      },
      "documentation": {
        "url": "http://docs.gravitee.io/"
      },
      "portal": {
        "entrypoint": "https://INGRESS_HOSTNAME_PLACEHOLDER/BASE_PATH-32100/gateway",
        "title": "Management UI",
        "analytics": {"enabled":false,"trackingId":""},
        "apikeyHeader": "X-Gravitee-Api-Key",
        "rating": {"enabled":false},
        "support": {"enabled":true},
        "userCreation": {"enabled":false}
      },
      "theme": {"loader":"assets/gravitee_logo_anim.gif","logo":"themes/assets/GRAVITEE_LOGO1-01.png","name":"default"},
      "scheduler": {"tasks":10}
    }
---
# Source: apim3/templates/api/api-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gravitee-apim3-api
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: gravitee
    app.kubernetes.io/version: 3.11.2
    app.kubernetes.io/component: "api"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-3.1.30
  annotations:
spec:
  type: "ClusterIP"
  ports:
    - port: 8083
      targetPort: 8083
      protocol: TCP
      name: api
  selector:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: gravitee
    app.kubernetes.io/component: "api"
---
# Source: apim3/templates/gateway/gateway-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gravitee-apim3-gateway
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: gravitee
    app.kubernetes.io/version: 3.11.2
    app.kubernetes.io/component: "gateway"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-3.1.30
  annotations:
spec:
  type: "ClusterIP"
  ports:
    - port: 8082
      targetPort: 8082
      protocol: TCP
      name: gateway
  selector:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: gravitee
    app.kubernetes.io/component: "gateway"
---
# Source: apim3/templates/portal/portal-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gravitee-apim3-portal
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: gravitee
    app.kubernetes.io/version: 3.11.2
    app.kubernetes.io/component: "portal"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-3.1.30
  annotations:
spec:
  type: "ClusterIP"
  ports:
    - port: 8003
      targetPort: 8080
      protocol: TCP
      name: portal
  selector:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: gravitee
    app.kubernetes.io/component: "portal"
---
# Source: apim3/templates/ui/ui-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gravitee-apim3-ui
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: gravitee
    app.kubernetes.io/version: 3.11.2
    app.kubernetes.io/component: "ui"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-3.1.30
  annotations:
spec:
  type: "ClusterIP"
  ports:
    - port: 8002
      targetPort: 8080
      protocol: TCP
      name: ui
  selector:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: gravitee
    app.kubernetes.io/component: "ui"
---
# Source: apim3/templates/api/api-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gravitee-apim3-api
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: gravitee
    app.kubernetes.io/version: 3.11.2
    app.kubernetes.io/component: "api"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-3.1.30
spec:
  strategy: 
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: apim3
      app.kubernetes.io/instance: gravitee
      app.kubernetes.io/component: "api"
  template:
    metadata:
      annotations:
        chaos.alpha.kubernetes.io/enabled: "false"
        checksum/config: 06508b923a39b3150c421a656a9d1587072176c2105148214f0e0f902c97af06
      labels:
        app.kubernetes.io/name: apim3
        app.kubernetes.io/instance: gravitee
        app.kubernetes.io/component: "api"
    spec:
      affinity: 
        {}
      nodeSelector: 
        {}
      tolerations: 
        []
      terminationGracePeriodSeconds: 30
      initContainers:
        - name: get-repository-jdbc-ext
          env: []
          image: alpine:latest
          imagePullPolicy: Always
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          command: ['sh', '-c', "mkdir -p /usr/local/src/plugins-ext && cd /usr/local/src/plugins-ext && wget  http://nexus:8081/repository/maven-public/org/postgresql/postgresql/42.2.24/postgresql-42.2.24.jar"]
          volumeMounts:
            - name: graviteeio-apim-repository-jdbc-ext
              mountPath: /usr/local/src/plugins-ext        
      containers:
        - name: gravitee-apim3-api
          image: "graviteeio/apim-management-api:3.11.2"
          imagePullPolicy: Always
          securityContext: 
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8083
          env:
          envFrom: 
            []
          livenessProbe: 
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 30
            tcpSocket:
              port: http
          readinessProbe: 
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 30
            tcpSocket:
              port: http
          resources: 
            limits:
              cpu: 500m
              memory: 1024Mi
            requests:
              cpu: 200m
              memory: 512Mi
          volumeMounts:
            - name: config
              mountPath: /opt/graviteeio-management-api/config/gravitee.yml
              subPath: gravitee.yml
            - name: graviteeio-apim-repository-jdbc-ext
              mountPath: /opt/graviteeio-management-api/plugins/ext/repository-jdbc            
      volumes:
        - name: config
          configMap:
            name: gravitee-apim3-api
        - name: graviteeio-apim-repository-jdbc-ext
          emptyDir: {}
---
# Source: apim3/templates/gateway/gateway-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gravitee-apim3-gateway
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: gravitee
    app.kubernetes.io/version: 3.11.2
    app.kubernetes.io/component: "gateway"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-3.1.30
spec:
  strategy: 
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: apim3
      app.kubernetes.io/instance: gravitee
      app.kubernetes.io/component: "gateway"
  template:
    metadata:
      annotations:
        chaos.alpha.kubernetes.io/enabled: "false"
        checksum/config: 21244ce1ea189ebbbcdb892a79c28a900907323869ae4d191afd348af4aa3ee5
      labels:
        app.kubernetes.io/name: apim3
        app.kubernetes.io/instance: gravitee
        app.kubernetes.io/component: "gateway"
    spec:
      affinity: 
        {}
      nodeSelector: 
        {}
      tolerations: 
        []
      terminationGracePeriodSeconds: 30
      initContainers:
        - name: get-repository-jdbc-ext
          env: []
          image: alpine:latest
          imagePullPolicy: Always
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          command: ['sh', '-c', "mkdir -p /usr/local/src/plugins-ext && cd /usr/local/src/plugins-ext && wget  http://nexus:8081/repository/maven-public/org/postgresql/postgresql/42.2.24/postgresql-42.2.24.jar"]
          volumeMounts:
            - name: graviteeio-apim-repository-jdbc-ext
              mountPath: /usr/local/src/plugins-ext        
      containers:
        - name: gravitee-apim3-gateway
          image: "graviteeio/apim-gateway:3.11.2"
          imagePullPolicy: Always
          securityContext: 
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8082
          env:
          envFrom: 
            []
          livenessProbe: 
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 30
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 30
            tcpSocket:
              port: http
          resources: 
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 256Mi
          volumeMounts:
            - name: config
              mountPath: /opt/graviteeio-gateway/config/gravitee.yml
              subPath: gravitee.yml
            - name: graviteeio-apim-repository-jdbc-ext
              mountPath: /opt/graviteeio-gateway/plugins/ext/repository-jdbc            
      volumes:
        - name: config
          configMap:
            name: gravitee-apim3-gateway
        - name: graviteeio-apim-repository-jdbc-ext
          emptyDir: {}
---
# Source: apim3/templates/portal/portal-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gravitee-apim3-portal
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: gravitee
    app.kubernetes.io/version: 3.11.2
    app.kubernetes.io/component: "portal"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-3.1.30
spec:
  strategy: 
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: apim3
      app.kubernetes.io/instance: gravitee
      app.kubernetes.io/component: "portal"
  template:
    metadata:
      annotations:
        chaos.alpha.kubernetes.io/enabled: "false"
        checksum/config: 058b2b2a8f1fc49d24aa5ef40452640346c8300de477cf3060761c2b141780fe
      labels:
        app.kubernetes.io/name: apim3
        app.kubernetes.io/instance: gravitee
        app.kubernetes.io/component: "portal"
    spec:
      affinity: 
        {}
      nodeSelector: 
        {}
      tolerations: 
        []
      terminationGracePeriodSeconds: 30
      containers:
        - name: gravitee-apim3-portal
          image: "graviteeio/apim-portal-ui:3.11.2"
          imagePullPolicy: Always
          securityContext: 
            runAsGroup: 101
            runAsNonRoot: true
            runAsUser: 101
          env:
            - name: PORTAL_API_URL
              value: "https://INGRESS_HOSTNAME_PLACEHOLDER/BASE_PATH-32100/portal/"
          envFrom: 
            []
          ports:
            - name: http
              containerPort: 8080
          livenessProbe: 
            failureThreshold: 3
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 10
            periodSeconds: 30
          readinessProbe: 
            failureThreshold: 3
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 10
            periodSeconds: 30
          resources: 
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
          volumeMounts:
            - name: config
              mountPath: /usr/share/nginx/html/assets/config.json
              subPath: config.json
      volumes:
        - name: config
          configMap:
            name: gravitee-apim3-portal
---
# Source: apim3/templates/ui/ui-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gravitee-apim3-ui
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: gravitee
    app.kubernetes.io/version: 3.11.2
    app.kubernetes.io/component: "ui"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-3.1.30
spec:
  strategy: 
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: apim3
      app.kubernetes.io/instance: gravitee
      app.kubernetes.io/component: "ui"
  template:
    metadata:
      annotations:
        chaos.alpha.kubernetes.io/enabled: "false"
        checksum/config: 84854ddaaa482d8be744adc48e6c4faca9cedf259907923bc4334efcb77ed53d
      labels:
        app.kubernetes.io/name: apim3
        app.kubernetes.io/instance: gravitee
        app.kubernetes.io/component: "ui"
    spec:
      affinity: 
        {}
      nodeSelector: 
        {}
      tolerations: 
        []
      terminationGracePeriodSeconds: 30
      containers:
        - name: gravitee-apim3-ui
          image: "graviteeio/apim-management-ui:3.11.2"
          imagePullPolicy: Always
          securityContext: 
            runAsGroup: 101
            runAsNonRoot: true
            runAsUser: 101
          env:
            - name: MGMT_API_URL
              value: "https://INGRESS_HOSTNAME_PLACEHOLDER/BASE_PATH-32100/management/"
          envFrom: 
            []
          ports:
            - name: http
              containerPort: 8080
          livenessProbe: 
            failureThreshold: 3
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 10
            periodSeconds: 30
          readinessProbe: 
            failureThreshold: 3
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 10
            periodSeconds: 30
          resources: 
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
          volumeMounts:
            - name: config
              mountPath: /usr/share/nginx/html/constants.json
              subPath: constants.json
      volumes:
        - name: config
          configMap:
            name: gravitee-apim3-ui
---
# Source: apim3/templates/api/api-ingress-management.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gravitee-apim3-api-management
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: gravitee
    app.kubernetes.io/version: 3.11.2
    app.kubernetes.io/component: "api"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-3.1.30
  annotations:
      kubernetes.io/ingress.class: "nginx"
      nginx.ingress.kubernetes.io/configuration-snippet: "etag on;\nproxy_pass_header ETag;\nproxy_set_header if-match \"\";\n"
      nginx.ingress.kubernetes.io/rewrite-target: "/management$1$2"
spec:
  rules:
  - host: INGRESS_HOSTNAME_PLACEHOLDER
    http:
      paths:
      - pathType: Prefix
        path: /BASE_PATH-32100/management(/|$)(.*)
        backend:
          service:
            name: gravitee-apim3-api
            port:
              number: 8083
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gravitee-apim3-api-management-internal
  annotations:
      kubernetes.io/ingress.class: "nginx"
      nginx.ingress.kubernetes.io/configuration-snippet: "etag on;\nproxy_pass_header ETag;\nproxy_set_header if-match \"\";\n"
spec:
  rules:
  - http:
      paths:
      - pathType: Prefix
        path: /management
        backend:
          service:
            name: gravitee-apim3-api
            port:
              number: 8083
---
# Source: apim3/templates/api/api-ingress-portal.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gravitee-apim3-api-portal
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: gravitee
    app.kubernetes.io/version: 3.11.2
    app.kubernetes.io/component: "api"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-3.1.30
  annotations:
      kubernetes.io/ingress.class: "nginx"
      nginx.ingress.kubernetes.io/configuration-snippet: "etag on;\nproxy_pass_header ETag;\nproxy_set_header if-match \"\";\n"
      nginx.ingress.kubernetes.io/rewrite-target: "/portal$1$2"
spec:
  rules:
  - host: INGRESS_HOSTNAME_PLACEHOLDER
    http:
      paths:
      - pathType: Prefix
        path: /BASE_PATH-32100/portal(/|$)(.*)
        backend:
          service:
            name: gravitee-apim3-api
            port:
              number: 8083
---
# Source: apim3/templates/gateway/gateway-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gravitee-apim3-gateway
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: gravitee
    app.kubernetes.io/version: 3.11.2
    app.kubernetes.io/component: "gateway"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-3.1.30
  annotations:
      kubernetes.io/ingress.class: "nginx"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/rewrite-target: "/$1"
spec:
  rules:
  - host: INGRESS_HOSTNAME_PLACEHOLDER
    http:
      paths:
      - pathType: Prefix
        path: /BASE_PATH-32100/gateway/(.*)
        backend:
          service:
            name: gravitee-apim3-gateway
            port:
              number: 8082
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gravitee-apim3-gateway-internal
  annotations:
      kubernetes.io/ingress.class: "nginx"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/rewrite-target: "/$1"
spec:
  rules:
  - http:
      paths:
      - pathType: Prefix
        path: /gateway/(.*)
        backend:
          service:
            name: gravitee-apim3-gateway
            port:
              number: 8082
---
# Source: apim3/templates/portal/portal-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gravitee-apim3-portal
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: gravitee
    app.kubernetes.io/version: 3.11.2
    app.kubernetes.io/component: "portal"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-3.1.30
  annotations:
      kubernetes.io/ingress.class: "nginx"
      nginx.ingress.kubernetes.io/configuration-snippet: |
        etag on;
        proxy_pass_header ETag;
        sub_filter '<base href="/"' '<base href="/BASE_PATH-32100/portal-ui/"';
        sub_filter_once on;
        proxy_set_header Accept-Encoding "";
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/rewrite-target: "/$1$2"
spec:
  rules:
  - host: INGRESS_HOSTNAME_PLACEHOLDER
    http:
      paths:
      - pathType: Prefix
        path: /BASE_PATH-32100/portal-ui(/|$)(.*)
        backend:
          service:
            name: gravitee-apim3-portal
            port:
              number: 8003
---
# Source: apim3/templates/ui/ui-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gravitee-apim3-ui
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: gravitee
    app.kubernetes.io/version: 3.11.2
    app.kubernetes.io/component: "ui"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-3.1.30
  annotations:
      kubernetes.io/ingress.class: "nginx"
      nginx.ingress.kubernetes.io/configuration-snippet: "etag on;\nproxy_pass_header ETag;\n"
      nginx.ingress.kubernetes.io/rewrite-target: "/$1$2"
spec:
  rules:
  - host: INGRESS_HOSTNAME_PLACEHOLDER
    http:
      paths:
      - pathType: Prefix
        path: /BASE_PATH-32100(/|$)(.*)
        backend:
          service:
            name: gravitee-apim3-ui
            port:
              number: 8002
---
# Source: apim3/templates/gateway/gateway-service-account.yaml
#
# Copyright (C) 2015 The Gravitee team (http://gravitee.io)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
